import os
import pygame
import random as r
import time
import sys


def load_image(name):
    fullname = os.path.join(name)
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    return image


class Circle:
    def __init__(self, scr, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.scr = scr
        self.score = r.choice([1, 1, 1, 2, 2, 3])
        self.col = pygame.Color([(255, 153, 51), "white", "yellow"][self.score - 1])
        self.scale = [30, 20, 10][self.score - 1]
        pygame.draw.circle(scr, self.col, (x, y), 30)
        self.vector = r.randint(1, 4)

    def check(self):
        if self.x == self.scale:
            if self.y == self.scale:
                self.vector = 4
            elif self.vector == 2:
                self.vector = 1
            else:
                self.vector = 4
        elif self.y == self.scale:
            if self.x == self.w - self.scale:
                self.vector = 3
            elif self.vector == 1:
                self.vector = 4
            else:
                self.vector = 3
        elif self.x == self.w - self.scale:
            if self.y == self.h - self.scale:
                self.vector = 2
            elif self.vector == 1:
                self.vector = 2
            else:
                self.vector = 3
        elif self.y == self.h - self.scale:
            if self.x == self.scale:
                self.vector = 1
            elif self.vector == 3:
                self.vector = 2
            else:
                self.vector = 1

    def move(self):
        if self.vector == 1:
            self.x += 1
            self.y -= 1
        elif self.vector == 2:
            self.x -= 1
            self.y -= 1
        elif self.vector == 3:
            self.x -= 1
            self.y += 1
        elif self.vector == 4:
            self.x += 1
            self.y += 1
        if self.__class__ == Bomb:
            pygame.draw.circle(self.scr, pygame.Color("red"), (self.x, self.y), self.scale + 5)
        elif self.__class__ == Heal:
            pygame.draw.circle(self.scr, pygame.Color("green"), (self.x, self.y), self.scale + 5)
        elif self.__class__ == Clear:
            pygame.draw.circle(self.scr, pygame.Color("blue"), (self.x, self.y), self.scale + 5)
        pygame.draw.circle(self.scr, self.col, (self.x, self.y), self.scale)

    def shoot(self, x, y):
        if ((self.x - x) ** 2 + (self.y - y) ** 2) ** 0.5 <= self.scale:
            global score, score_streak, all_particles
            for _ in range(r.randint(30, 60)):
                all_particles.append(Particle(self.col, self.x, self.y, self.scr))
            all_particles.append(Number("purple", str(int(self.score * (1 + score_streak // 10))), self.x,
                                        self.y, self.scr))
            score += self.score * (1 + score_streak // 10)
            score_streak += self.score
            return True


class Bomb(Circle):
    def shoot(self, x, y):
        if ((self.x - x) ** 2 + (self.y - y) ** 2) ** 0.5 <= self.scale:
            global score, score_streak, all_circles, all_particles
            for _ in range(r.randint(30, 60)):
                all_particles.append(Particle(r.choice([self.col, pygame.Color("red")]), self.x, self.y, self.scr))
            all_particles.append(Number("purple", str(int(self.score * (1 + score_streak // 10))), self.x,
                                        self.y, self.scr))
            if 1 == r.randint(1, 5):
                all_circles.append(Bomb(self.scr, self.x // 1, self.y // 1, self.w, self.h))
                all_circles.append(Bomb(self.scr, self.x // 1, self.y // 1, self.w, self.h))
            else:
                all_circles.append(Circle(self.scr, self.x // 1, self.y // 1, self.w, self.h))
                all_circles.append(Circle(self.scr, self.x // 1, self.y // 1, self.w, self.h))
            score += self.score * (1 + score_streak // 10)
            score_streak += self.score
            return True


class Heal(Circle):
    def shoot(self, x, y):
        if ((self.x - x) ** 2 + (self.y - y) ** 2) ** 0.5 <= self.scale:
            global score, score_streak, health, all_particles
            for _ in range(r.randint(30, 60)):
                all_particles.append(Particle(r.choice([self.col, pygame.Color("green")]), self.x, self.y, self.scr))
            all_particles.append(Number("purple", str(int((self.score + (health % 10) * (health // 10)) *
                                                          (1 + score_streak // 10))), self.x, self.y, self.scr))
            all_particles.append(Number("green", "+" + str(int(self.score + (health % 10) * (health // 10) *
                                                               (1 + score_streak // 10))), self.x, self.y, self.scr))
            health += self.score
            score += self.score + (health % 10) * (health // 10) * (1 + score_streak // 10)
            score_streak += self.score + (health % 10) * (health // 10)
            health -= (health % 10) * (health // 10)
            return True


class Clear(Circle):
    def shoot(self, x, y):
        if ((self.x - x) ** 2 + (self.y - y) ** 2) ** 0.5 <= self.scale:
            global score, score_streak, all_circles, all_particles
            for _ in range(r.randint(30, 60)):
                all_particles.append(Particle(r.choice([self.col, pygame.Color("blue")]), self.x, self.y, self.scr))
            all_particles.append(Number("purple", str(int(self.score * (1 + score_streak // 10))),
                                        self.x, self.y, self.scr))
            score += self.score * (1 + score_streak // 10)
            score_streak += self.score
            for circle in all_circles:
                if circle.__class__ == Clear and all_circles:
                    all_circles.pop(all_circles.index(circle))
            for _ in range(5):
                if all_circles:
                    if all_circles[0].__class__ == Clear:
                        all_circles.pop(0)
                if all_circles:
                    all_circles[0].shoot(all_circles[0].x, all_circles[0].y)
                if all_circles:
                    all_circles.pop(0)
            return True


class Particle:
    def __init__(self, color, x, y, scr):
        self.color = color
        self.x = x
        self.y = y
        self.life = r.randint(50, 80)
        self.scr = scr
        pygame.draw.circle(self.scr, self.color, (self.x, self.y), 3)

    def draw(self):
        pygame.draw.circle(self.scr, self.color, (self.x, self.y), 3)

    def move(self):
        self.x += r.choice([-2, -1, 1, 2])
        self.y += r.choice([-2, -1, 1, 2])
        self.life -= 1

    def dead(self):
        if self.life <= 0:
            return True


class Number:
    def __init__(self, color, number, x, y, scr):
        self.x = x
        self.y = y
        self.life = r.randint(50, 80)
        self.scr = scr
        self.text = font.render(number, True, pygame.Color(color))
        screen.blit(self.text, (self.x, self.y))

    def draw(self):
        screen.blit(self.text, (self.x, self.y))

    def move(self):
        self.x += r.choice([-2, -1, 1, 2])
        self.y += r.choice([-2, -1, 1, 2])
        self.life -= 1

    def dead(self):
        if self.life <= 0:
            return True


if __name__ == '__main__':
    pygame.init()
    pygame.display.set_caption('')
    size = width, height = 900, 900
    screen = pygame.display.set_mode(size)

    running = True
    all_circles = []
    all_particles = []
    font = pygame.font.Font(None, 50)
    score = 0
    score_streak = 1.0
    health = 3
    clock = pygame.time.Clock()
    screen.fill(pygame.Color('black'))
    while running:
        if score_streak > 1:
            score_streak -= 0.02
        if 1 == r.randint(1, 100):
            scale = 0
            x1, y1 = r.randint(35, width - 35), r.randint(35, height - 35)
            all_circles.append([Circle(screen, x1 // 1, y1 // 1, width, height),
                                Bomb(screen, x1 // 1, y1 // 1, width, height),
                                Heal(screen, x1 // 1, y1 // 1, width, height),
                                Clear(screen, x1 // 1, y1 // 1, width, height)][r.choice([0] * 16
                                                                                         + [1] * 4
                                                                                         + [2] * 2
                                                                                         + [3] * 1)])
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                x_mouse, y_mouse = event.pos
                before = len(all_circles)
                for i in range(len(all_circles)):
                    blue = all_circles[i].__class__ != Clear
                    if all_circles[i].shoot(x_mouse, y_mouse):
                        if all_circles and blue:
                            all_circles.pop(i)
                        break
                if before == len(all_circles):
                    all_particles.append(Number("red", "-1", x_mouse, y_mouse, screen))
                    health -= 1
        for i in all_circles:
            i.check()
        screen.fill(pygame.Color('black'))
        time.sleep(0.01)
        for i in all_circles:
            if i.x < 0 or i.x > width or i.y < 0 or i.y > height:
                all_circles.pop(all_circles.index(i))
            i.move()
        for i in all_particles:
            i.move()
            i.draw()
            if i.dead():
                all_particles.pop(all_particles.index(i))
        text = font.render("Очки " + str(score), True, (0, 255, 0))
        screen.blit(text, (10, 10))
        text = font.render("Серия " + str(score_streak // 0.01 / 100), True, (0, 255, 0))
        screen.blit(text, (10, 50))
        text = font.render("Жизни " + str(health) + " / 10", True, (255, 0, 0))
        screen.blit(text, (10, 90))
        text = font.render("Шары " + str(len(all_circles)) + " / 30", True, (255, 0, 0))
        screen.blit(text, (10, 130))
        if health <= 0 or len(all_circles) >= 30:
            screen.fill(pygame.Color("black"))
            text = font.render("Game over!", True, (255, 0, 0))
            text_x = width // 2 - text.get_width() // 2
            text_y = height // 2 - text.get_height() // 2
            screen.blit(text, (text_x, text_y))
            text = font.render("Ваш счёт: " + str(score), True, (0, 255, 0))
            text_x = width // 2 - text.get_width() // 2
            text_y = height // 2 - text.get_height() // 2 + 60
            screen.blit(text, (text_x, text_y))
            pygame.display.flip()
            for i in range(60):
                text = font.render("Игра выключится через " + str(60 - i), True, (0, 255, 0))
                pygame.draw.rect(screen, pygame.Color("black"), (0, 0, 600, 50), 0)
                screen.blit(text, (10, 10))
                pygame.display.flip()
                time.sleep(1)
            running = False
        pygame.display.flip()
    pygame.quit()
